#!/bin/bash

#	A tool for detecting and showing crash info
#	Copyright (C) 2020 Grzegorz Kocio≈Çek
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Register and show info about crashing programs

PNAME=${0##*/}

if pgrep "${PNAME}$" | egrep -v "$$" >/dev/null; then
	notify-send -u low "${PNAME} is already running"
	exit 1
fi

die() {
	echo "$@" >&2
	exit 1
}

case $1 in
	"-h" | "--help" )
		die "Usage: $0 [dialog time] [do_flush?{y/n}] [do_daemonize?{y/n}]";;
	[1-9][0-9]* )
		DIALOG_TIME=$1;;
	* )
		DIALOG_TIME=20000;;
esac
[[ $2 == 'y' ]] && DO_NOT_FLUSH=1
DAEMONIZE_CMD="prog"
[[ $3 == 'y' ]] && DAEMONIZE_CMD="prog &"

msg_send() {
	local icon
	local found
	local pref_arg
	icon=$1
	shift 1
	if [[ -n $DEBUG ]]; then
		echo "$@"
	else
		found=$(find -L /usr/share/.icons/apps/scalable \
			~/.local/share/.icons/apps/scalable \
			~/.icons/apps/scalable \
			-iname "${icon}.svg" -o -iname "${icon}.ico" \
			-type f 2>/dev/null | head -n1)

		[[ -n ${found} ]] && pref_arg="-i"
		notify-send -u critical -t ${DIALOG_TIME} "$@" ${pref_arg} "${found}"
	fi
}


NL=$'\n'
print_info() {
	msg_send "$1" "$1($2) crashed${NL}${NL}Type of fault: $3${NL}${NL}Reason: $4${NL}${NL}IP: $5${NL}${NL}SP: $6${NL}${NL}In: $7"
}

_DMESG_MAX_NAME_WIDTH=15
PATTERN_HAS_SQUARE_BRACKET='\['
execute_trap() {
	local sub_1
	local name
	local pid
	local reason
	local ip
	local sp
	local lib
	sub_1=${1##*traps: }
	name=${sub_1}
	while [[ ${#name} -gt ${_DMESG_MAX_NAME_WIDTH} ]] && [[ ${name} =~ ${PATTERN_HAS_SQUARE_BRACKET} ]]; do
		name=${name%[*}
	done
	pid=${sub_1#*${name}[}
	reason=${pid#* }
	ip=${reason#*ip:}
	sp=${reason#*sp:}
	lib=${reason#*in }
	reason=${reason%% ip*}
	ip=${ip%% *}
	sp=${sp%% *}
	pid=${pid%%]*}
	print_info "${name}" "${pid}" "trap" "${reason}" "${ip}" "${sp}" "${lib}"
}

execute_sigsegv() {
	local sub_1
	local name
	local pid
	local reason
	local ip
	local sp
	local lib
	sub_1=$1
	name=$1
	while [[ ${#name} -gt ${_DMESG_MAX_NAME_WIDTH} ]] && [[ ${name} =~ ${PATTERN_HAS_SQUARE_BRACKET} ]]; do
		name=${name%[*}
	done
	pid=${sub_1#*${name}[}
	reason=${pid#* }
	ip=${reason#*ip }
	sp=${reason#*sp }
	lib=${reason#*in }
	reason=${reason%% ip*}
	ip=${ip%% *}
	sp=${sp%% *}
	pid=${pid%%]*}
	print_info "${name}" "${pid}" "segfault" "${reason}" "${ip}" "${sp}" "${lib}"
}

prog() {
PATTERN_TRAPS='^traps:'
PATTERN_SEGFAULT='^.*: segfault'
dmesg -ktw -l info | \
{
	# Flush previous crashes.
	# They are useless in the start
	if [[ -z ${DO_NOT_FLUSH} ]]; then
		sleep 0.5
		while read -t0; do read -r; done
	fi

	# Start the main loop
	while read -r LINE; do
		if [[ ${LINE} =~ ${PATTERN_TRAPS} ]]; then
			execute_trap "$LINE"
		elif [[ ${LINE} =~ ${PATTERN_SEGFAULT} ]]; then
			execute_sigsegv "$LINE"
		fi
	done
}
}

eval "${DAEMONIZE_CMD}"
