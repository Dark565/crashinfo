#!/bin/bash

#	A tool for detecting and showing crash info
#	Copyright (C) 2020 Grzegorz Kocio≈Çek
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Register and show info about crashing programs

export LC_ALL=C
export LANG=C

die() {
	echo "$@" >&2
	exit 1
}

PNAME=${0##*/}
DIALOG_TIME=20000
DO_NOT_FLUSH=
DAEMONIZE_CMD="prog"

PROG_DIR=$(readlink -f "$0")
PROG_DIR=${PROG_DIR%/*}
[[ -z $PROG_DIR ]] && PROG_DIR='.'

SAP_PATH=
# Find the symbol-at-pos script 
find_helping_script() {
	SAP_PATH="${PROG_DIR}/symbol-at-pos"
	[[ -x $SAP_PATH ]] && return 0

	SAP_PATH=$(command -v symbol-at-pos) || die "Cannot find the symbol-at-pos script"
}


read -r -d '' HELP_STR <<EOF
Usage: $0 [--noflush] [--daemonize] [dialog time]
EOF
help() {
	die "$HELP_STR"
}

while [[ -n $1 ]]; do
	case "$1" in
		"--noflush" )
			DO_NOT_FLUSH=1
			;;
		"-d" | "--daemonize" )
			DAEMONIZE_CMD="prog &"
			;;
		[1-9][0-9]* )
			DIALOG_TIME=$1
			;;
		* )
			help
			;;
	esac
	shift 1
done

if pgrep "${PNAME}$" | egrep -v "$$" >/dev/null; then
	notify-send -u low "${PNAME} is already running"
	exit 1
fi

if ! command -v c++filt &>/dev/null; then
	echo "Warning: c++filt not found. Mangled names will not be demangled."
	function c++filt() {
		echo "$1"
	}
fi

shorten_path() {
	local txt=$1
	local cols=$2

	[[ ${#txt} -le $cols ]] && { SHORTEN_PATH=$txt; return 0; }

	local isdir
	[[ $txt =~ /$ ]] && { isdir=1; txt="${txt%/}"; }

	local res_txt=
	local end_txt
	if [[ $txt =~ ^(/)?([^/]*)/(.*/)?([^/]*)$ ]]; then
		local isbeg=${#BASH_REMATCH[1]}
		local sel_txt=${BASH_REMATCH[2]}
		local sum_txt="${BASH_REMATCH[1]}${BASH_REMATCH[2]}/"
		local m_slash="${BASH_REMATCH[3]}"
		end_txt=${BASH_REMATCH[4]}

		res_txt+=${BASH_REMATCH[1]}
		if (( ${#sum_txt} >= $cols )); then
			res_txt+=".../"
		else
			res_txt+="$sel_txt/"
			if [[ -n $m_slash ]]; then
				res_txt+='.../'
			fi
		fi
	else
		end_txt=$txt
	fi

	if (( ${#res_txt} + ${#end_txt} >= $cols )); then
		if [[ $end_txt =~ (.)(\.[^\.]*)?$ ]]; then
			end_txt="...${BASH_REMATCH[1]}${BASH_REMATCH[2]}"
		fi
	fi
	
	res_txt+=$end_txt
	[[ -n $isdir ]] && res_txt+='/'
	(( ${#res_txt} >= $cols )) && return 1

	SHORTEN_PATH=${res_txt}
}

msg_send() {
	local icon
	local found
	local pref_arg
	local notify_ln
	icon=$1
	shift 1
	if [[ -n $DEBUG ]]; then
		echo "$@"
	else
		found=$(find -L /usr/share/.icons/apps/scalable \
			~/.local/share/.icons/apps/scalable \
			~/.icons/apps/scalable \
			-iname "${icon}.svg" -o -iname "${icon}.ico" \
			-type f 2>/dev/null | head -n1)

		[[ -n ${found} ]] && pref_arg="-i"
		notify_ln="notify-send -u critical -t \${DIALOG_TIME} \"\$@\""
		[[ -n ${found} ]] && notify_ln+=" -i \"\${found}\""

		eval "$notify_ln"
	fi
}

find_helping_script

NL=$'\n'

_DMESG_MAX_NAME_WIDTH=15
PATTERN_HAS_SQUARE_BRACKET='\['
print_fault() {
	local sub_1
	local name
	local type_name
	local reg_cl
	local pid
	local reason
	local ip
	local sp
	local lib
	local page_range
	local pgrg1
	local pgrg2
	local to_send_msg
	sub_1=${1##*traps: }
	name=${sub_1}
	type_name=$2
	reg_cl=$3
	while [[ ${#name} -gt ${_DMESG_MAX_NAME_WIDTH} ]] && [[ ${name} =~ ${PATTERN_HAS_SQUARE_BRACKET} ]]; do
		name=${name%[*}
	done
	pid=${sub_1#*${name}[}
	reason=${pid#* }
	ip=${reason#*ip${reg_cl}}
	ip=${ip}
	sp=${reason#*sp${reg_cl}}
	sp=${sp}
	lib=${reason#*in }
	reason=${reason%% ip*}
	ip=${ip%% *}
	sp=${sp%% *}
	pid=${pid%%]*}
	page_range=${lib#*[}
	lib=${lib%[*}
	page_range=${page_range%]}
	pgrg1=${page_range%+*}
	local pgrg_diff=${page_range#*+}
	printf -v pgrg2 "%x" $((0x$pgrg1 + 0x$pgrg_diff))

	local maps_content=$(</proc/$pid/maps)
	local full_name=$(readlink /proc/$pid/exe)
	local full_lib=$(readlink /proc/$pid/map_files/$pgrg1-$pgrg2)
	shorten_path "$full_name" 20
	local shorten_name=${SHORTEN_PATH}
	local map_line=$(echo $(echo "$maps_content" | grep "^0*$pgrg1-0*$pgrg2"))
	local fo1=$(echo "$map_line" | cut -d' ' -f3 | sed -E 's/^0*([0-9a-f]+)/\1/')
	#local fo2
	#printf -v fo2 "%x\n" $((0x$fo1+0x$pgrg_diff))
	shorten_path "$full_lib" 20
	local shorten_lib=${SHORTEN_PATH}

	[[ "$ip" =~ ^0*([0-9a-f]+)$ ]]
	local norm_ip=${BASH_REMATCH[1]}

	local ip_rel_off=$((0x$norm_ip - 0x$pgrg1 + 0x$fo1))

	declare -a sym_arr
	readarray sym_arr <<<"$("${SAP_PATH}" "${full_lib}" ${ip_rel_off})"
	sym_arr[0]=${sym_arr[0]%$NL}
	sym_arr[3]=${sym_arr[3]%$NL}

	local vm_sym_start
	if [[ ${sym_arr[3]%} != "[unknown]" ]]; then
		sym_arr[3]=$(c++filt "${sym_arr[3]}")
		printf -v vm_sym_start "0x%x" $((0x$norm_ip - $ip_rel_off + ${sym_arr[4]}))
	else
		vm_sym_start='?'
	fi

	read -r -d '' to_send_msg <<EOF
Type of fault: ${type_name}
Reason: ${reason}
IP: 0x${ip}
SP: 0x${sp}

Code source: ${shorten_lib}
- Section: ${sym_arr[0]}
- Function: ${sym_arr[3]}
-- VM: ${vm_sym_start}
EOF

	msg_send "${name}" "${shorten_name}(${pid}) crashed" "${to_send_msg}"
}

prog() {
	PATTERN_TRAPS='^traps:'
	PATTERN_SEGFAULT='^.*: segfault'
	dmesg -ktw -l info | \
	{
		# Flush previous crashes.
		# They are useless in the start
		if [[ -z ${DO_NOT_FLUSH} ]]; then
			sleep 0.5
			while read -t0; do read -r; done
		fi

		# Start the main loop
		while read -r LINE; do
			if [[ ${LINE} =~ ${PATTERN_TRAPS} ]]; then
				print_fault "$LINE" trap ':' &
			elif [[ ${LINE} =~ ${PATTERN_SEGFAULT} ]]; then
				print_fault "$LINE" segfault ' ' &
			fi
		done
	}
}

eval "${DAEMONIZE_CMD}"
